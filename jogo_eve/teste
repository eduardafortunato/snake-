import pygame
import random
from pygame.locals import *


# Cores
branco = (255, 255, 255)
preto = (0, 0, 0)
cores_objetos = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (188, 11, 243)]

# Dimensões da tela
largura_tela = 600
altura_tela = 600

# Dicionário de efeitos
cores_efeitos = {
    (255, 0, 0): {"efeito": "acelerar", "duracao": 5},
    (0, 255, 0): {"efeito": "crescer", "duracao": 3},
    (0, 0, 255): {"efeito": "inverter", "duracao": 2},
    (255, 255, 0): {"efeito": "invulneravel", "duracao": 10},
    (188, 11, 243): {"efeito": "pontos_dobrados", "duracao": None}
}

efeitos_ativos = {}

# Classe para a cobra
class Cobra:
    # ... (código da classe Cobra)
    def __init__(self):
        self.corpo = [(200, 200), (210, 200), (220, 200), (230, 200)]
        self.cor = branco
        self.direcao = LEFT
        self.invulneravel = False
        self.tempo_invulneravel = 0

    def mover(self):
        x = self.corpo[0][0]
        y = self.corpo[0][1]

        if self.direcao == UP:
            y -= 10
        elif self.direcao == DOWN:
            y += 10
        elif self.direcao == RIGHT:
            x += 10
        elif self.direcao == LEFT:
            x -= 10

        self.corpo.insert(0, (x, y))
        self.corpo.pop()

    def desenhar(self):
        for pos in self.corpo:
            pygame.draw.rect(screen, self.cor, pygame.Rect(pos[0], pos[1], 10, 10))

# Classe para o objeto
class Objeto:
    # ... (código da classe Objeto)
    def __init__(self):
        self.pos = on_grid_random()
        self.cor = random.choice(cores_objetos)

    def desenhar(self):
        pygame.draw.rect(screen, self.cor, pygame.Rect(self.pos[0], self.pos[1], 10, 10))

# Funções auxiliares
def on_grid_random():
    # ... (código da função)
    x = random.randint(0, 59)
    y = random.randint(0, 59)
    return x * 10, y * 10

def colisão(c1, c2):
    return c1 == c2

def aplicar_efeito(cor):
    efeito = cores_efeitos[cor]
    efeitos_ativos[efeito["efeito"]] = efeito["duracao"]

def remover_efeitos_expiratos():
    for efeito, duracao in list(efeitos_ativos.items()):
        if duracao is not None and duracao <= 0:
            del efeitos_ativos[efeito]
        elif duracao is not None:
            efeitos_ativos[efeito] -= 1

def verifica_colisao(cobra):
    for pos in cobra.corpo[1:]:
        if cobra.corpo[0] == pos:
            return True  # Colisão com o corpo
    # Verificar colisão com as bordas
    if cobra.corpo[0][0] < 0 or cobra.corpo[0][0] >= largura_tela:
        return True
    if cobra.corpo[0][1] < 0 or cobra.corpo[0][1] >= altura_tela:
        return True
    return False



# Direções
UP = 0
RIGHT = 1
DOWN = 2
LEFT = 3

# Inicialização
pygame.init()
screen = pygame.display.set_mode((largura_tela, altura_tela))
pygame.display.set_caption('Jogo da Cobrinha')
# ... (restante da inicialização)
cobra = Cobra()
objeto = Objeto()
clock = pygame.time.Clock()
font = pygame.font.Font('freesansbold.ttf', 18)
placar = 0


# Loop principal do jogo
while True:
    for event in pygame.event.get():
        # ... (tratamento de eventos)
        if event.type == QUIT:
            pygame.quit()
        elif event.type == KEYDOWN:
            if event.key == K_UP:
                cobra.direcao = UP
            elif event.key == K_DOWN:  # Corrigido para K_DOWN
                cobra.direcao = DOWN
            elif event.key == K_RIGHT:
                cobra.direcao = RIGHT
            elif event.key == K_LEFT:
                cobra.direcao = LEFT

    # Move a cobra
    cobra.mover()

        # Verifica se a cobra saiu da tela
    cabeça_x, cabeça_y = cobra.corpo[0]
    if cabeça_x < 0 or cabeça_x >= largura_tela or cabeça_y < 0 or cabeça_y >= altura_tela:
        # Game Over
        font = pygame.font.Font(None, 36)
        text = font.render("Game Over", True, (255,255,255) )
        text_rect = text.get_rect(center=(largura_tela//2, altura_tela//2))
        screen.blit(text, text_rect)
        pygame.display.update()
        pygame.time.wait(2000)
        pygame.quit()
        quit()

    # Verifica colisões e aplica efeitos
    if colisão(cobra.corpo[0], objeto.pos):
        cobra.corpo.append(cobra.corpo[-1])
        placar += 1
        objeto.pos = on_grid_random()
        objeto.cor = random.choice(cores_objetos)
        aplicar_efeito(objeto.cor)
    if verifica_colisao(cobra):
        # Game over
        break
        

    # Aplica os efeitos ativos
    remover_efeitos_expiratos()
    for efeito, duracao in efeitos_ativos.items():
        if efeito == "acelerar":
            cobra.velocidade += 2
        elif efeito == "crescer":
            cobra.corpo.append(cobra.corpo[-1])
        elif efeito == "inverter":
            cobra.direcao = (cobra.direcao + 2) % 4
        elif efeito == "invulneravel":
            cobra.invulneravel = True
        elif efeito == "pontos_dobrados":
            placar *= 2

    # Desenho na tela
    screen.fill(preto)
    # ... (desenha a cobra, o objeto e o placar)
    cobra.desenhar()
    objeto.desenhar()

    if not cobra.invulneravel:
        # Verifica se a cobra colidiu com si mesma ou com as bordas
        if verifica_colisao(cobra):
            # Game over
            break

     # Placar
    score_text = font.render("Score: " + str(placar), True, branco)
    screen.blit(score_text, [10, 10])

    pygame.display.update()
    clock.tick(10)